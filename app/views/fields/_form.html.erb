<% if field.present? %>
  <div class="container mt-5">
    <h1 class="mb-4">
      <% if field.new_record? %>
        New Field
      <% else %>
        Edit Field
      <% end %>
    </h1>

    <%= form_with(model: field, local: true) do |form| %>
      <% if field.errors.any? %>
        <div>
          <h2><%= pluralize(field.errors.count, "error") %> error saving this field:</h2>
          <ul>
            <% field.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <div class="mt-3">
        <%= form.label :name, class: 'form-label' %>
        <%= form.text_field :name, class: 'form-control' %>
      </div>

      <div class="mt-2">
        <%= form.label :shape, 'Shape', class: 'form-label' %>
        <div id="map" style="height: 500px; width: 100%; border: 1px solid #ccc;"></div>
        <%= form.hidden_field :shape, id: 'shape_geojson' %>
      </div>

      <div class="mt-3">
        <%= form.submit 'Submit', class: 'btn btn-primary' %>
        <%= link_to 'Back', fields_path, class: 'btn btn-secondary' %>
      </div>
    <% end %>

    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const map = L.map('map').setView([50.4501, 30.5234], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: 'Â© OpenStreetMap contributors'
        }).addTo(map);

        const drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        const drawControl = new L.Control.Draw({
          draw: {
            polygon: true,
            polyline: false,
            rectangle: true,
            circle: false,
            marker: false,
            circlemarker: false
          },
          edit: {
            featureGroup: drawnItems,
            remove: true
          }
        });
        map.addControl(drawControl);

        <% if field.shape.present? %>
          try {
            const polygons = <%= field.as_leaflet_polygons.to_json.html_safe %>;
            
            polygons.forEach(function(latlngs) {
              const leafletPolygon = L.polygon(latlngs);
              drawnItems.addLayer(leafletPolygon);
            });
            
            if (drawnItems.getLayers().length > 0) {
              map.fitBounds(drawnItems.getBounds());
            }
          } catch (error) {
            console.error('Error loading field shape:', error);
          }
        <% end %>

        map.on(L.Draw.Event.CREATED, function(event) {
          const layer = event.layer;
          drawnItems.addLayer(layer);
          updateGeoJSON();
        });

        map.on(L.Draw.Event.EDITED, function(event) {
          updateGeoJSON();
        });

        map.on(L.Draw.Event.EDITSTOP, function(event) {
          updateGeoJSON();
        });

        map.on(L.Draw.Event.EDITRESIZE, function(event) {
          updateGeoJSON();
        });

        map.on(L.Draw.Event.EDITMOVE, function(event) {
          updateGeoJSON();
        });

        map.on(L.Draw.Event.EDITVERTEX, function(event) {
          updateGeoJSON();
        });

        map.on(L.Draw.Event.DELETED, function(event) {
          updateGeoJSON();
        });

        function updateGeoJSON() {
          try {
            const geojson = drawnItems.toGeoJSON();
            if (geojson && geojson.features && geojson.features.length > 0) {
              document.getElementById('shape_geojson').value = JSON.stringify(geojson);
            } else {
              document.getElementById('shape_geojson').value = '';
            }
          } catch (error) {
            console.error('Error updating GeoJSON:', error);
          }
        }

        const form = document.querySelector('form');
        form.addEventListener('submit', function(event) {
          const nameInputValue = document.getElementById('field_name').value;
          const shapeInputValue = document.getElementById('shape_geojson').value;

          if (!nameInputValue) {
            alert('Please enter a name for the field.');
            event.preventDefault();
            return;
          }

          if (!shapeInputValue) {
            alert('Please draw a field shape on the map.');
            event.preventDefault();
            return;
          }
        });
      });
    </script>
  <% else %>
    <p>Error: No field data available. Please try again.</p>
  <% end %>
</div>
